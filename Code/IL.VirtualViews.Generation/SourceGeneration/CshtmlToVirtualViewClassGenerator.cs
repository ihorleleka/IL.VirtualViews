using System;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using IL.VirtualViews.Generation.Models;
using Microsoft.CodeAnalysis;

namespace IL.VirtualViews.Generation.SourceGeneration;

[Generator]
public sealed class CshtmlToVirtualViewClassGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var compilationProvider = context.CompilationProvider.Select((compilation, _) => compilation.AssemblyName);

        // Get the .virtual.cshtml files
        var cshtmlFiles = context
            .AdditionalTextsProvider
            .Where(at => at.Path.EndsWith(".virtual.cshtml"))
            .Select((cshtmlFile, cancellationToken) =>
            {
                var className = Path.GetFileNameWithoutExtension(cshtmlFile.Path);
                className = className.Replace(".virtual", string.Empty);
                var content = cshtmlFile.GetText(cancellationToken)?.ToString() ?? string.Empty;
                return new GenerationClass(className, content, cshtmlFile.Path);
            })
            .Collect();

        // Combine the cshtmlFiles with the compilationProvider to pass both pieces of information to the next step
        var combined = cshtmlFiles.Combine(compilationProvider);

        context.RegisterSourceOutput(combined, Generate!);
    }

    private static void Generate(SourceProductionContext spc, (ImmutableArray<GenerationClass> generationClasses, string assemblyName) combined)
    {
        foreach (var generationClass in combined.generationClasses)
        {
            var pathSplit = Path
                .GetDirectoryName(generationClass.Path)!
                .Split(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar)
                .Where(x => !string.IsNullOrEmpty(x))
                .ToList();
            var startIndex = pathSplit.IndexOf(pathSplit.LastOrDefault(x => combined.assemblyName.StartsWith(x, StringComparison.InvariantCultureIgnoreCase)));
            var namespaceToUse = startIndex != -1 ? string.Join(".", pathSplit.Skip(startIndex)) : combined.assemblyName;

            spc.AddSource($"{generationClass.Name}.g.cs", BuildClassBody(generationClass, namespaceToUse));
        }
    }


    private static string BuildClassBody(GenerationClass generationClass, string namespaceToUse) =>
        $$""""
           // <auto-generated />
           using IL.VirtualViews.Interfaces;
           
           namespace {{namespaceToUse}};
           
           public partial class {{generationClass.Name}} : IVirtualView
           {
              public string ViewContent() =>
          """
          {{generationClass.CshtmlContent}}
          """;
           }
          """";
}